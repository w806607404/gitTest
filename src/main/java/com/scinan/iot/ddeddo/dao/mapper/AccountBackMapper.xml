<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.scinan.iot.ddeddo.dao.AccountBackMapper" >
	<!--  默认不使用缓存
    <cache type="org.mybatis.caches.redis.LoggingRedisCache"/>
    -->
    <sql id="sql_columns">
            id,
			device_id,
			user_id,
			parent_id,
			shipping,
			status,
			back_type,
			cause,
			create_time
    </sql>

  <sql id="sql_where">
        <if test="conds!=null">
            <trim prefix="WHERE" prefixOverrides="AND|OR">
                <foreach collection="conds.conds" index="index" item="cond">
                    ${cond.linkType}
                    <if test="cond.condType == 'EQUAL'">${cond.s_param} = #{cond.value}</if>
                    <if test="cond.condType == 'GREATEQUAL'">${cond.s_param} &gt;= #{cond.value}</if>
                    <if test="cond.condType == 'GREATTHAN'">${cond.s_param} &gt; #{cond.value}</if>
                    <if test="cond.condType == 'LESSEQUAL'">${cond.s_param} &lt;= #{cond.value}</if>
                    <if test="cond.condType == 'LESSTHAN'">${cond.s_param} &lt; #{cond.value}</if>
                    <if test="cond.condType == 'BETWEEN'">${cond.s_param} BETWEEN #{cond.startValue} AND #{cond.endValue}</if>
                    <if test="cond.condType == 'ISNULL'">${cond.s_param} IS NULL</if>
                    <if test="cond.condType == 'NOTNULL'">${cond.s_param} IS NOT NULL</if>
                    <if test="cond.condType == 'LIKE'">${cond.s_param} LIKE #{cond.value}</if>
                    <if test="cond.condType == 'IN'">${cond.s_param} IN 
                        <foreach item="item" index="index" collection="cond.value" open="(" separator="," close=")">
                            #{item}
                        </foreach>                                       
                    </if>
                </foreach>
            </trim>
        </if>
    </sql>
      <insert id="save" parameterType="com.scinan.iot.ddeddo.dao.domain.AccountBack" useGeneratedKeys="true" keyProperty="id">
        insert into t_account_back
          (
             	device_id,
				user_id,
				parent_id,
				shipping,
				status,
				back_type,
				cause,
				create_time
          )
        values
          (
    	    	#{device_id},
	    	    #{user_id},
	    	    #{parent_id}, #{shipping},#{status},#{back_type},#{cause},now()
	          )
    </insert>

    <select id="fetchByPage" parameterType="java.util.Map" resultType="com.scinan.iot.ddeddo.dao.domain.AccountBack">
     <choose>
       <when test="limit>0">
			SELECT a.*,b.user_nickname user_nickname,b.user_name user_name,d.name user_type
			FROM t_account_back a 
			LEFT JOIN t_account_info b ON a.user_id=b.id 
			LEFT JOIN t_role c ON b.role_id=c.id 
			LEFT JOIN t_role_type d ON c.role_type=d.id 
			
			<include refid="sql_where" />
			<if test="sort!=null">
				ORDER BY ${sort.param}  ${sort.type} 
			</if>
			limit #{offset},#{limit}  
       </when>
        <otherwise>
            SELECT a.*,b.user_nickname user_nickname,b.user_name user_name,d.name user_type
			FROM t_account_back a 
			LEFT JOIN t_account_info b ON a.user_id=b.id 
			LEFT JOIN t_role c ON b.role_id=c.id 
			LEFT JOIN t_role_type d ON c.role_type=d.id 
            <include refid="sql_where" />
        </otherwise>
      </choose>         
    </select>
    
   <select id="fetchByUser" parameterType="java.util.Map" resultType="com.scinan.iot.ddeddo.dao.domain.AccountBack">
        SELECT
        <include refid="sql_columns" />
        FROM t_account_back t
        where
        t.user_id=#{user_id} and t.device_id = #{device_id}
    </select>


    <select id="fetchById" parameterType="java.lang.Long" resultType="com.scinan.iot.ddeddo.dao.domain.AccountBack">
        SELECT
        <include refid="sql_columns" />
        FROM t_account_back t
        where
        t.id=#{id}
    </select>
    <delete id="delete" parameterType="java.lang.Long">
        delete from t_account_back where id=#{id}
    </delete>

<delete id="deleteByUser_id" parameterType="java.lang.Long">
        delete from t_account_back where user_id=#{user_id}
    </delete> 


    <update id="update" parameterType="com.scinan.iot.ddeddo.dao.domain.AccountBack">
		update t_account_back
	     <set >
        	<if test="device_id != null" >
    	    		device_id = #{device_id},
		    </if>
        	<if test="user_id != null" >
    	    		user_id = #{user_id},
		    </if>
		    <if test="parent_id != null" >
    	    		parent_id = #{parent_id},
		    </if>
		    <if test="shipping != null" >
    	    		shipping = #{shipping},
		    </if>
		    <if test="status != null" >
    	    		status = #{status},
		    </if>
		    <if test="back_type != null" >
    	    		back_type = #{back_type},
		    </if>
		    <if test="cause != null" >
    	    		cause = #{cause},
		    </if>
        	<if test="create_time != null" >
    	    		create_time = #{create_time},
		    </if>
    	    </set>
	    where id=#{id}
    </update>
    
    
     <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT COUNT(1)  FROM t_account_back a 
			LEFT JOIN t_account_info b ON a.user_id=b.id 
			LEFT JOIN t_role c ON b.role_id=c.id 
			LEFT JOIN t_role_type d ON c.role_type=d.id  
		<include refid="sql_where" />
    </select>
    
    <select id="countByTransfer" resultType="java.lang.Integer">
        SELECT COUNT(1)  FROM t_account_back a 
		where status in (0,1,2) 
		and user_id = #{user_id} or parent_id = #{user_id}
		and status in (0,1,2) 
    </select>
    
</mapper>